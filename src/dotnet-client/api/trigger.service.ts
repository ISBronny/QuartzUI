/**
 * WebApplication1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ExistsResponse } from '../model/exists-response';
// @ts-ignore
import { GroupPausedResponse } from '../model/group-paused-response';
// @ts-ignore
import { KeyDto } from '../model/key-dto';
// @ts-ignore
import { NamesDto } from '../model/names-dto';
// @ts-ignore
import { ProblemDetails } from '../model/problem-details';
// @ts-ignore
import { RescheduleJobRequest } from '../model/reschedule-job-request';
// @ts-ignore
import { RescheduleJobResponse } from '../model/reschedule-job-response';
// @ts-ignore
import { ScheduleJobRequest } from '../model/schedule-job-request';
// @ts-ignore
import { ScheduleJobResponse } from '../model/schedule-job-response';
// @ts-ignore
import { ScheduleJobsRequest } from '../model/schedule-jobs-request';
// @ts-ignore
import { Trigger } from '../model/trigger';
// @ts-ignore
import { TriggerStateDto } from '../model/trigger-state-dto';
// @ts-ignore
import { UnscheduleJobResponse } from '../model/unschedule-job-response';
// @ts-ignore
import { UnscheduleJobsRequest } from '../model/unschedule-jobs-request';
// @ts-ignore
import { UnscheduleJobsResponse } from '../model/unschedule-jobs-response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    TriggerServiceInterface
} from './trigger.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class TriggerService implements TriggerServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkTriggerExists(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<ExistsResponse>;
    public checkTriggerExists(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<ExistsResponse>>;
    public checkTriggerExists(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<ExistsResponse>>;
    public checkTriggerExists(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling checkTriggerExists.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling checkTriggerExists.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling checkTriggerExists.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/exists`;
        return this.httpClient.request<ExistsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPausedTriggerGroups(schedulerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<NamesDto>;
    public getPausedTriggerGroups(schedulerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<NamesDto>>;
    public getPausedTriggerGroups(schedulerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<NamesDto>>;
    public getPausedTriggerGroups(schedulerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getPausedTriggerGroups.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/groups/paused`;
        return this.httpClient.request<NamesDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<Trigger>;
    public getTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<Trigger>>;
    public getTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<Trigger>>;
    public getTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getTrigger.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling getTrigger.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling getTrigger.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<Trigger>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTriggerGroupNames(schedulerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<NamesDto>;
    public getTriggerGroupNames(schedulerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<NamesDto>>;
    public getTriggerGroupNames(schedulerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<NamesDto>>;
    public getTriggerGroupNames(schedulerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getTriggerGroupNames.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/groups`;
        return this.httpClient.request<NamesDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTriggerKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<Array<KeyDto>>;
    public getTriggerKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<Array<KeyDto>>>;
    public getTriggerKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<Array<KeyDto>>>;
    public getTriggerKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getTriggerKeys.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers`;
        return this.httpClient.request<Array<KeyDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTriggerState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<TriggerStateDto>;
    public getTriggerState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<TriggerStateDto>>;
    public getTriggerState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<TriggerStateDto>>;
    public getTriggerState(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getTriggerState.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling getTriggerState.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling getTriggerState.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/state`;
        return this.httpClient.request<TriggerStateDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isTriggerGroupPaused(schedulerName: string, triggerGroup: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<GroupPausedResponse>;
    public isTriggerGroupPaused(schedulerName: string, triggerGroup: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<GroupPausedResponse>>;
    public isTriggerGroupPaused(schedulerName: string, triggerGroup: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<GroupPausedResponse>>;
    public isTriggerGroupPaused(schedulerName: string, triggerGroup: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling isTriggerGroupPaused.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling isTriggerGroupPaused.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/groups/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/paused`;
        return this.httpClient.request<GroupPausedResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public pauseTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public pauseTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public pauseTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling pauseTrigger.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling pauseTrigger.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling pauseTrigger.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/pause`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public pauseTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public pauseTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public pauseTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling pauseTriggers.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/pause`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param rescheduleJobRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rescheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, rescheduleJobRequest: RescheduleJobRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<RescheduleJobResponse>;
    public rescheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, rescheduleJobRequest: RescheduleJobRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<RescheduleJobResponse>>;
    public rescheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, rescheduleJobRequest: RescheduleJobRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<RescheduleJobResponse>>;
    public rescheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, rescheduleJobRequest: RescheduleJobRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling rescheduleJob.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling rescheduleJob.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling rescheduleJob.');
        }
        if (rescheduleJobRequest === null || rescheduleJobRequest === undefined) {
            throw new Error('Required parameter rescheduleJobRequest was null or undefined when calling rescheduleJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reschedule`;
        return this.httpClient.request<RescheduleJobResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: rescheduleJobRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetTriggerFromErrorState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public resetTriggerFromErrorState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public resetTriggerFromErrorState(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public resetTriggerFromErrorState(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling resetTriggerFromErrorState.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling resetTriggerFromErrorState.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling resetTriggerFromErrorState.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/reset-from-error-state`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public resumeTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public resumeTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public resumeTrigger(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling resumeTrigger.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling resumeTrigger.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling resumeTrigger.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/resume`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public resumeTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public resumeTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public resumeTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling resumeTriggers.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/resume`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param scheduleJobRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleJob(schedulerName: string, scheduleJobRequest: ScheduleJobRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<ScheduleJobResponse>;
    public scheduleJob(schedulerName: string, scheduleJobRequest: ScheduleJobRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<ScheduleJobResponse>>;
    public scheduleJob(schedulerName: string, scheduleJobRequest: ScheduleJobRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<ScheduleJobResponse>>;
    public scheduleJob(schedulerName: string, scheduleJobRequest: ScheduleJobRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling scheduleJob.');
        }
        if (scheduleJobRequest === null || scheduleJobRequest === undefined) {
            throw new Error('Required parameter scheduleJobRequest was null or undefined when calling scheduleJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/schedule`;
        return this.httpClient.request<ScheduleJobResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: scheduleJobRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param scheduleJobsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleJobs(schedulerName: string, scheduleJobsRequest: ScheduleJobsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public scheduleJobs(schedulerName: string, scheduleJobsRequest: ScheduleJobsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public scheduleJobs(schedulerName: string, scheduleJobsRequest: ScheduleJobsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public scheduleJobs(schedulerName: string, scheduleJobsRequest: ScheduleJobsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling scheduleJobs.');
        }
        if (scheduleJobsRequest === null || scheduleJobsRequest === undefined) {
            throw new Error('Required parameter scheduleJobsRequest was null or undefined when calling scheduleJobs.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/schedule-multiple`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: scheduleJobsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unscheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<UnscheduleJobResponse>;
    public unscheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<UnscheduleJobResponse>>;
    public unscheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<UnscheduleJobResponse>>;
    public unscheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling unscheduleJob.');
        }
        if (triggerGroup === null || triggerGroup === undefined) {
            throw new Error('Required parameter triggerGroup was null or undefined when calling unscheduleJob.');
        }
        if (triggerName === null || triggerName === undefined) {
            throw new Error('Required parameter triggerName was null or undefined when calling unscheduleJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/${this.configuration.encodeParam({name: "triggerGroup", value: triggerGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "triggerName", value: triggerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/unschedule`;
        return this.httpClient.request<UnscheduleJobResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param unscheduleJobsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unscheduleJobs(schedulerName: string, unscheduleJobsRequest: UnscheduleJobsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<UnscheduleJobsResponse>;
    public unscheduleJobs(schedulerName: string, unscheduleJobsRequest: UnscheduleJobsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<UnscheduleJobsResponse>>;
    public unscheduleJobs(schedulerName: string, unscheduleJobsRequest: UnscheduleJobsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<UnscheduleJobsResponse>>;
    public unscheduleJobs(schedulerName: string, unscheduleJobsRequest: UnscheduleJobsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling unscheduleJobs.');
        }
        if (unscheduleJobsRequest === null || unscheduleJobsRequest === undefined) {
            throw new Error('Required parameter unscheduleJobsRequest was null or undefined when calling unscheduleJobs.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers/unschedule`;
        return this.httpClient.request<UnscheduleJobsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: unscheduleJobsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
