/**
 * WebApplication1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ExistsResponse } from '../model/models';
import { GroupPausedResponse } from '../model/models';
import { KeyDto } from '../model/models';
import { NamesDto } from '../model/models';
import { ProblemDetails } from '../model/models';
import { RescheduleJobRequest } from '../model/models';
import { RescheduleJobResponse } from '../model/models';
import { ScheduleJobRequest } from '../model/models';
import { ScheduleJobResponse } from '../model/models';
import { ScheduleJobsRequest } from '../model/models';
import { Trigger } from '../model/models';
import { TriggerStateDto } from '../model/models';
import { UnscheduleJobResponse } from '../model/models';
import { UnscheduleJobsRequest } from '../model/models';
import { UnscheduleJobsResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface TriggerServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    checkTriggerExists(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<ExistsResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     */
    getPausedTriggerGroups(schedulerName: string, extraHttpRequestParams?: any): Observable<NamesDto>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    getTrigger(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<Trigger>;

    /**
     * 
     * 
     * @param schedulerName 
     */
    getTriggerGroupNames(schedulerName: string, extraHttpRequestParams?: any): Observable<NamesDto>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    getTriggerKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<Array<KeyDto>>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    getTriggerState(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<TriggerStateDto>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     */
    isTriggerGroupPaused(schedulerName: string, triggerGroup: string, extraHttpRequestParams?: any): Observable<GroupPausedResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    pauseTrigger(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    pauseTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     * @param rescheduleJobRequest 
     */
    rescheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, rescheduleJobRequest: RescheduleJobRequest, extraHttpRequestParams?: any): Observable<RescheduleJobResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    resetTriggerFromErrorState(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    resumeTrigger(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    resumeTriggers(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param scheduleJobRequest 
     */
    scheduleJob(schedulerName: string, scheduleJobRequest: ScheduleJobRequest, extraHttpRequestParams?: any): Observable<ScheduleJobResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param scheduleJobsRequest 
     */
    scheduleJobs(schedulerName: string, scheduleJobsRequest: ScheduleJobsRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param triggerGroup 
     * @param triggerName 
     */
    unscheduleJob(schedulerName: string, triggerGroup: string, triggerName: string, extraHttpRequestParams?: any): Observable<UnscheduleJobResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param unscheduleJobsRequest 
     */
    unscheduleJobs(schedulerName: string, unscheduleJobsRequest: UnscheduleJobsRequest, extraHttpRequestParams?: any): Observable<UnscheduleJobsResponse>;

}
