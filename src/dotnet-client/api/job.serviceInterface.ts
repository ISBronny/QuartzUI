/**
 * WebApplication1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AddJobRequest } from '../model/models';
import { CurrentlyExecutingJobDto } from '../model/models';
import { DeleteJobResponse } from '../model/models';
import { DeleteJobsRequest } from '../model/models';
import { DeleteJobsResponse } from '../model/models';
import { ExistsResponse } from '../model/models';
import { GroupPausedResponse } from '../model/models';
import { InterruptResponse } from '../model/models';
import { JobDetailDto } from '../model/models';
import { KeyDto } from '../model/models';
import { NamesDto } from '../model/models';
import { ProblemDetails } from '../model/models';
import { Trigger } from '../model/models';
import { TriggerJobRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface JobServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param schedulerName 
     * @param addJobRequest 
     */
    addJob(schedulerName: string, addJobRequest: AddJobRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    checkJobExists(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<ExistsResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     */
    currentlyExecutingJobs(schedulerName: string, extraHttpRequestParams?: any): Observable<Array<CurrentlyExecutingJobDto>>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    deleteJob(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<DeleteJobResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param deleteJobsRequest 
     */
    deleteJobs(schedulerName: string, deleteJobsRequest: DeleteJobsRequest, extraHttpRequestParams?: any): Observable<DeleteJobsResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    getJobDetails(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<JobDetailDto>;

    /**
     * 
     * 
     * @param schedulerName 
     */
    getJobGroupNames(schedulerName: string, extraHttpRequestParams?: any): Observable<NamesDto>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    getJobKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<Array<KeyDto>>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    getJobTriggers(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<Array<Trigger>>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    interruptJob(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<InterruptResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param fireInstanceId 
     */
    interruptJobInstance(schedulerName: string, fireInstanceId: string, extraHttpRequestParams?: any): Observable<InterruptResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     */
    isJobGroupPaused(schedulerName: string, jobGroup: string, extraHttpRequestParams?: any): Observable<GroupPausedResponse>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    pauseJob(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    pauseJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     */
    resumeJob(schedulerName: string, jobGroup: string, jobName: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     */
    resumeJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param triggerJobRequest 
     */
    triggerJob(schedulerName: string, jobGroup: string, jobName: string, triggerJobRequest?: TriggerJobRequest, extraHttpRequestParams?: any): Observable<{}>;

}
