/**
 * WebApplication1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AddJobRequest } from '../model/add-job-request';
// @ts-ignore
import { CurrentlyExecutingJobDto } from '../model/currently-executing-job-dto';
// @ts-ignore
import { DeleteJobResponse } from '../model/delete-job-response';
// @ts-ignore
import { DeleteJobsRequest } from '../model/delete-jobs-request';
// @ts-ignore
import { DeleteJobsResponse } from '../model/delete-jobs-response';
// @ts-ignore
import { ExistsResponse } from '../model/exists-response';
// @ts-ignore
import { GroupPausedResponse } from '../model/group-paused-response';
// @ts-ignore
import { InterruptResponse } from '../model/interrupt-response';
// @ts-ignore
import { JobDetailDto } from '../model/job-detail-dto';
// @ts-ignore
import { KeyDto } from '../model/key-dto';
// @ts-ignore
import { NamesDto } from '../model/names-dto';
// @ts-ignore
import { ProblemDetails } from '../model/problem-details';
// @ts-ignore
import { Trigger } from '../model/trigger';
// @ts-ignore
import { TriggerJobRequest } from '../model/trigger-job-request';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {
    JobServiceInterface
} from './job.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class JobService implements JobServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param schedulerName 
     * @param addJobRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addJob(schedulerName: string, addJobRequest: AddJobRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public addJob(schedulerName: string, addJobRequest: AddJobRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public addJob(schedulerName: string, addJobRequest: AddJobRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public addJob(schedulerName: string, addJobRequest: AddJobRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling addJob.');
        }
        if (addJobRequest === null || addJobRequest === undefined) {
            throw new Error('Required parameter addJobRequest was null or undefined when calling addJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: addJobRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkJobExists(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<ExistsResponse>;
    public checkJobExists(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<ExistsResponse>>;
    public checkJobExists(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<ExistsResponse>>;
    public checkJobExists(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling checkJobExists.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling checkJobExists.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling checkJobExists.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/exists`;
        return this.httpClient.request<ExistsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public currentlyExecutingJobs(schedulerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<Array<CurrentlyExecutingJobDto>>;
    public currentlyExecutingJobs(schedulerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<Array<CurrentlyExecutingJobDto>>>;
    public currentlyExecutingJobs(schedulerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<Array<CurrentlyExecutingJobDto>>>;
    public currentlyExecutingJobs(schedulerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling currentlyExecutingJobs.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/currently-executing`;
        return this.httpClient.request<Array<CurrentlyExecutingJobDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<DeleteJobResponse>;
    public deleteJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<DeleteJobResponse>>;
    public deleteJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<DeleteJobResponse>>;
    public deleteJob(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling deleteJob.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling deleteJob.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling deleteJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<DeleteJobResponse>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param deleteJobsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteJobs(schedulerName: string, deleteJobsRequest: DeleteJobsRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<DeleteJobsResponse>;
    public deleteJobs(schedulerName: string, deleteJobsRequest: DeleteJobsRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<DeleteJobsResponse>>;
    public deleteJobs(schedulerName: string, deleteJobsRequest: DeleteJobsRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<DeleteJobsResponse>>;
    public deleteJobs(schedulerName: string, deleteJobsRequest: DeleteJobsRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling deleteJobs.');
        }
        if (deleteJobsRequest === null || deleteJobsRequest === undefined) {
            throw new Error('Required parameter deleteJobsRequest was null or undefined when calling deleteJobs.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/delete`;
        return this.httpClient.request<DeleteJobsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: deleteJobsRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobDetails(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<JobDetailDto>;
    public getJobDetails(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<JobDetailDto>>;
    public getJobDetails(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<JobDetailDto>>;
    public getJobDetails(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getJobDetails.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling getJobDetails.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling getJobDetails.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<JobDetailDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobGroupNames(schedulerName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<NamesDto>;
    public getJobGroupNames(schedulerName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<NamesDto>>;
    public getJobGroupNames(schedulerName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<NamesDto>>;
    public getJobGroupNames(schedulerName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getJobGroupNames.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/groups`;
        return this.httpClient.request<NamesDto>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<Array<KeyDto>>;
    public getJobKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<Array<KeyDto>>>;
    public getJobKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<Array<KeyDto>>>;
    public getJobKeys(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getJobKeys.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs`;
        return this.httpClient.request<Array<KeyDto>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobTriggers(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<Array<Trigger>>;
    public getJobTriggers(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<Array<Trigger>>>;
    public getJobTriggers(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<Array<Trigger>>>;
    public getJobTriggers(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling getJobTriggers.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling getJobTriggers.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling getJobTriggers.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/triggers`;
        return this.httpClient.request<Array<Trigger>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public interruptJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<InterruptResponse>;
    public interruptJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<InterruptResponse>>;
    public interruptJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<InterruptResponse>>;
    public interruptJob(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling interruptJob.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling interruptJob.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling interruptJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/interrupt`;
        return this.httpClient.request<InterruptResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param fireInstanceId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public interruptJobInstance(schedulerName: string, fireInstanceId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<InterruptResponse>;
    public interruptJobInstance(schedulerName: string, fireInstanceId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<InterruptResponse>>;
    public interruptJobInstance(schedulerName: string, fireInstanceId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<InterruptResponse>>;
    public interruptJobInstance(schedulerName: string, fireInstanceId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling interruptJobInstance.');
        }
        if (fireInstanceId === null || fireInstanceId === undefined) {
            throw new Error('Required parameter fireInstanceId was null or undefined when calling interruptJobInstance.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/interrupt/${this.configuration.encodeParam({name: "fireInstanceId", value: fireInstanceId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<InterruptResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isJobGroupPaused(schedulerName: string, jobGroup: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<GroupPausedResponse>;
    public isJobGroupPaused(schedulerName: string, jobGroup: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<GroupPausedResponse>>;
    public isJobGroupPaused(schedulerName: string, jobGroup: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<GroupPausedResponse>>;
    public isJobGroupPaused(schedulerName: string, jobGroup: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling isJobGroupPaused.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling isJobGroupPaused.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/groups/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/paused`;
        return this.httpClient.request<GroupPausedResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public pauseJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public pauseJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public pauseJob(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling pauseJob.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling pauseJob.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling pauseJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/pause`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pauseJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public pauseJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public pauseJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public pauseJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling pauseJobs.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/pause`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public resumeJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public resumeJob(schedulerName: string, jobGroup: string, jobName: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public resumeJob(schedulerName: string, jobGroup: string, jobName: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling resumeJob.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling resumeJob.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling resumeJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/resume`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param groupContains 
     * @param groupEndsWith 
     * @param groupStartsWith 
     * @param groupEquals 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resumeJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public resumeJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public resumeJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public resumeJobs(schedulerName: string, groupContains?: string, groupEndsWith?: string, groupStartsWith?: string, groupEquals?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling resumeJobs.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (groupContains !== undefined && groupContains !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupContains, 'groupContains');
        }
        if (groupEndsWith !== undefined && groupEndsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEndsWith, 'groupEndsWith');
        }
        if (groupStartsWith !== undefined && groupStartsWith !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupStartsWith, 'groupStartsWith');
        }
        if (groupEquals !== undefined && groupEquals !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>groupEquals, 'groupEquals');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/resume`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param schedulerName 
     * @param jobGroup 
     * @param jobName 
     * @param triggerJobRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public triggerJob(schedulerName: string, jobGroup: string, jobName: string, triggerJobRequest?: TriggerJobRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any>;
    public triggerJob(schedulerName: string, jobGroup: string, jobName: string, triggerJobRequest?: TriggerJobRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public triggerJob(schedulerName: string, jobGroup: string, jobName: string, triggerJobRequest?: TriggerJobRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public triggerJob(schedulerName: string, jobGroup: string, jobName: string, triggerJobRequest?: TriggerJobRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (schedulerName === null || schedulerName === undefined) {
            throw new Error('Required parameter schedulerName was null or undefined when calling triggerJob.');
        }
        if (jobGroup === null || jobGroup === undefined) {
            throw new Error('Required parameter jobGroup was null or undefined when calling triggerJob.');
        }
        if (jobName === null || jobName === undefined) {
            throw new Error('Required parameter jobName was null or undefined when calling triggerJob.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/schedulers/${this.configuration.encodeParam({name: "schedulerName", value: schedulerName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/jobs/${this.configuration.encodeParam({name: "jobGroup", value: jobGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/${this.configuration.encodeParam({name: "jobName", value: jobName, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/trigger`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: triggerJobRequest,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
